/*
 * This file is generated by jOOQ.
 */
package org.killbill.billing.plugin.dao.payment.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.dao.payment.gen.Indexes;
import org.killbill.billing.plugin.dao.payment.gen.Keys;
import org.killbill.billing.plugin.dao.payment.gen.Killbill;
import org.killbill.billing.plugin.dao.payment.gen.tables.records.TestPaymentMethodsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestPaymentMethods extends TableImpl<TestPaymentMethodsRecord> {

    private static final long serialVersionUID = -211541574;

    /**
     * The reference instance of <code>killbill.test_payment_methods</code>
     */
    public static final TestPaymentMethods TEST_PAYMENT_METHODS = new TestPaymentMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestPaymentMethodsRecord> getRecordType() {
        return TestPaymentMethodsRecord.class;
    }

    /**
     * The column <code>killbill.test_payment_methods.record_id</code>.
     */
    public final TableField<TestPaymentMethodsRecord, ULong> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>killbill.test_payment_methods.kb_payment_method_id</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> KB_PAYMENT_METHOD_ID = createField(DSL.name("kb_payment_method_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_payment_methods.kb_account_id</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> KB_ACCOUNT_ID = createField(DSL.name("kb_account_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_payment_methods.kb_tenant_id</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_first_name</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_FIRST_NAME = createField(DSL.name("cc_first_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_last_name</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_LAST_NAME = createField(DSL.name("cc_last_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_type</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_TYPE = createField(DSL.name("cc_type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_exp_month</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_EXP_MONTH = createField(DSL.name("cc_exp_month"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_exp_year</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_EXP_YEAR = createField(DSL.name("cc_exp_year"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_number</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_NUMBER = createField(DSL.name("cc_number"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_last_4</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_LAST_4 = createField(DSL.name("cc_last_4"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_start_month</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_START_MONTH = createField(DSL.name("cc_start_month"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_start_year</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_START_YEAR = createField(DSL.name("cc_start_year"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_issue_number</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_ISSUE_NUMBER = createField(DSL.name("cc_issue_number"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_verification_value</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_VERIFICATION_VALUE = createField(DSL.name("cc_verification_value"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.cc_track_data</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CC_TRACK_DATA = createField(DSL.name("cc_track_data"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.address1</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> ADDRESS1 = createField(DSL.name("address1"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.address2</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> ADDRESS2 = createField(DSL.name("address2"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.city</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.state</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.zip</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.country</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.token</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>killbill.test_payment_methods.additional_data</code>.
     */
    public final TableField<TestPaymentMethodsRecord, String> ADDITIONAL_DATA = createField(DSL.name("additional_data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>killbill.test_payment_methods.is_default</code>.
     */
    public final TableField<TestPaymentMethodsRecord, Short> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.test_payment_methods.is_deleted</code>.
     */
    public final TableField<TestPaymentMethodsRecord, Short> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.test_payment_methods.created_date</code>.
     */
    public final TableField<TestPaymentMethodsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.test_payment_methods.updated_date</code>.
     */
    public final TableField<TestPaymentMethodsRecord, LocalDateTime> UPDATED_DATE = createField(DSL.name("updated_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>killbill.test_payment_methods</code> table reference
     */
    public TestPaymentMethods() {
        this(DSL.name("test_payment_methods"), null);
    }

    /**
     * Create an aliased <code>killbill.test_payment_methods</code> table reference
     */
    public TestPaymentMethods(String alias) {
        this(DSL.name(alias), TEST_PAYMENT_METHODS);
    }

    /**
     * Create an aliased <code>killbill.test_payment_methods</code> table reference
     */
    public TestPaymentMethods(Name alias) {
        this(alias, TEST_PAYMENT_METHODS);
    }

    private TestPaymentMethods(Name alias, Table<TestPaymentMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestPaymentMethods(Name alias, Table<TestPaymentMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TestPaymentMethods(Table<O> child, ForeignKey<O, TestPaymentMethodsRecord> key) {
        super(child, key, TEST_PAYMENT_METHODS);
    }

    @Override
    public Schema getSchema() {
        return Killbill.KILLBILL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_PAYMENT_METHODS_TEST_PAYMENT_METHODS_KB_PAYMENT_METHOD_ID);
    }

    @Override
    public Identity<TestPaymentMethodsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_TEST_PAYMENT_METHODS;
    }

    @Override
    public UniqueKey<TestPaymentMethodsRecord> getPrimaryKey() {
        return Keys.KEY_TEST_PAYMENT_METHODS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TestPaymentMethodsRecord>> getKeys() {
        return Arrays.<UniqueKey<TestPaymentMethodsRecord>>asList(Keys.KEY_TEST_PAYMENT_METHODS_PRIMARY, Keys.KEY_TEST_PAYMENT_METHODS_RECORD_ID);
    }

    @Override
    public TestPaymentMethods as(String alias) {
        return new TestPaymentMethods(DSL.name(alias), this);
    }

    @Override
    public TestPaymentMethods as(Name alias) {
        return new TestPaymentMethods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestPaymentMethods rename(String name) {
        return new TestPaymentMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestPaymentMethods rename(Name name) {
        return new TestPaymentMethods(name, null);
    }
}
