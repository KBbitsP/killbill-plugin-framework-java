/*
 * This file is generated by jOOQ.
*/
package org.killbill.billing.plugin.dao.payment.gen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.dao.payment.gen.Keys;
import org.killbill.billing.plugin.dao.payment.gen.Killbill;
import org.killbill.billing.plugin.dao.payment.gen.tables.records.TestResponsesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestResponses extends TableImpl<TestResponsesRecord> {

    private static final long serialVersionUID = -505149329;

    /**
     * The reference instance of <code>killbill.test_responses</code>
     */
    public static final TestResponses TEST_RESPONSES = new TestResponses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestResponsesRecord> getRecordType() {
        return TestResponsesRecord.class;
    }

    /**
     * The column <code>killbill.test_responses.record_id</code>.
     */
    public final TableField<TestResponsesRecord, ULong> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.kb_account_id</code>.
     */
    public final TableField<TestResponsesRecord, String> KB_ACCOUNT_ID = createField("kb_account_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.kb_payment_id</code>.
     */
    public final TableField<TestResponsesRecord, String> KB_PAYMENT_ID = createField("kb_payment_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.kb_payment_transaction_id</code>.
     */
    public final TableField<TestResponsesRecord, String> KB_PAYMENT_TRANSACTION_ID = createField("kb_payment_transaction_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.kb_tenant_id</code>.
     */
    public final TableField<TestResponsesRecord, String> KB_TENANT_ID = createField("kb_tenant_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.transaction_type</code>.
     */
    public final TableField<TestResponsesRecord, String> TRANSACTION_TYPE = createField("transaction_type", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.amount</code>.
     */
    public final TableField<TestResponsesRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 9).nullable(false), this, "");

    /**
     * The column <code>killbill.test_responses.currency</code>.
     */
    public final TableField<TestResponsesRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CHAR.length(3), this, "");

    /**
     * The column <code>killbill.test_responses.additional_data</code>.
     */
    public final TableField<TestResponsesRecord, String> ADDITIONAL_DATA = createField("additional_data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>killbill.test_responses.created_date</code>.
     */
    public final TableField<TestResponsesRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>killbill.test_responses</code> table reference
     */
    public TestResponses() {
        this("test_responses", null);
    }

    /**
     * Create an aliased <code>killbill.test_responses</code> table reference
     */
    public TestResponses(String alias) {
        this(alias, TEST_RESPONSES);
    }

    private TestResponses(String alias, Table<TestResponsesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestResponses(String alias, Table<TestResponsesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Killbill.KILLBILL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestResponsesRecord, ULong> getIdentity() {
        return Keys.IDENTITY_TEST_RESPONSES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestResponsesRecord> getPrimaryKey() {
        return Keys.KEY_TEST_RESPONSES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestResponsesRecord>> getKeys() {
        return Arrays.<UniqueKey<TestResponsesRecord>>asList(Keys.KEY_TEST_RESPONSES_PRIMARY, Keys.KEY_TEST_RESPONSES_RECORD_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestResponses as(String alias) {
        return new TestResponses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestResponses rename(String name) {
        return new TestResponses(name, null);
    }
}
